#+STARTUP: hideblocks
#+PROPERTY: header-args :results output

* SHA-256
** Plain text input
#+HEADER: :var TEXT = "abcd"
#+begin_src janet
  (use botan)
  (print (hex-encode (:final (:update (hash/new "SHA-256") TEXT))))
#+end_src

#+RESULTS:
: 88D4266FD4E6338D13B845FCF289579D209C897823B9217DA3E161936F031589

** Plain 2 text input
#+HEADER: :var TEXT1 = "ab"
#+HEADER: :var TEXT2 = "cd"
#+begin_src janet
  (use botan)
  (let [hash (hash/new "SHA-256")]
    (:update hash TEXT1)
    (:update hash TEXT2)
    (print (hex-encode (:final hash))))
#+end_src

#+RESULTS:
: 88D4266FD4E6338D13B845FCF289579D209C897823B9217DA3E161936F031589

** Plain text and Hex input
#+HEADER: :var TEXT = "abcd"
#+HEADER: :var HEX = "0102"
#+begin_src janet
  (use botan)
  (let [hash (hash/new "SHA-256")]
    (:update hash TEXT)
    (:update hash (hex-decode HEX))
    (print (hex-encode (:final hash))))
#+end_src

#+RESULTS:
: 36D00CEFCBD3832F302C5E3FBFCC917ECD9BDBF497DE9E4525939CD783A800DD

** Hex input
#+HEADER: :var INPUT = "01020304"
#+begin_src janet
  (use botan)
  (print (hex-encode (:final (:update (hash/new "SHA-256") (hex-decode INPUT)))))
#+end_src

#+RESULTS:
: 9F64A747E1B97F131FABB6B447296C9B6F0201E79FB3C5356E6C77E89B6A806A

** Hex 2 input
#+HEADER: :var HEX1 = "0102"
#+HEADER: :var HEX2 = "0304"
#+begin_src janet
  (use botan)
  (let [hash (hash/new "SHA-256")]
    (:update hash (hex-decode HEX1))
    (:update hash (hex-decode HEX2))
    (print (hex-encode (:final hash))))
#+end_src

#+RESULTS:
: 9F64A747E1B97F131FABB6B447296C9B6F0201E79FB3C5356E6C77E89B6A806A

** Plain text repeat
#+HEADER: :var REPEAT_COUNT = 10
#+HEADER: :var TEXT = "abcd"
#+begin_src janet
  (use botan)
  (let [hash (hash/new "SHA-256")]
    (for i 0 REPEAT_COUNT (:update hash TEXT))
    (print (hex-encode (:final hash))))
#+end_src

#+RESULTS:
: 38986FC4DEFA1CD49321AD652FF3A02A36EBE62E5EE62C0696AC8F86F76DFA36

** Hex repeat
#+HEADER: :var REPEAT_COUNT = 10
#+HEADER: :var INPUT = "01020304"
#+begin_src janet
    (use botan)
    (let [hash (hash/new "SHA-256")]
      (for i 0 REPEAT_COUNT (:update hash (hex-decode INPUT)))
      (print (hex-encode (:final hash))))
#+end_src

#+RESULTS:
: C7C31ED6686BB62C7981C0FFC16759F7E60FB95231C847964D2674A4D269FE72

* MAC
** HMAC-256 hex input
#+HEADER: :var KEY = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var MSG = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [hmac (mac/new "HMAC(SHA-256)")]
    (:update (:set-key hmac (hex-decode KEY)) (hex-decode MSG))
    (print (hex-encode (:final hmac))))
#+end_src

#+RESULTS:
: B7FB0BE696FEAEC6F647F2F2A7B887944CF39546B1422105FB7FBEBC65787550

** HMAC-256 text input
#+HEADER: :var KEY = "test"
#+HEADER: :var MSG = "more and more data goes into a file to exceed the buffer size"
#+begin_src janet
  (use botan)
  (let [hmac (mac/new "HMAC(SHA-256)")]
    (:update (:set-key hmac KEY) MSG)
    (print (hex-encode (:final hmac))))
#+end_src

#+RESULTS:
: 46B75292B81002FD873E89C532A1B8545D6EFC9822EE938FEBA6DE2723161A67

** HMAC-512 hex input
#+HEADER: :var KEY = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var MSG = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [hmac (mac/new "HMAC(SHA-512)")]
    (:update (:set-key hmac (hex-decode KEY)) (hex-decode MSG))
    (print (hex-encode (:final hmac))))
#+end_src

#+RESULTS:
: 8A122F1E030909B37DEF5193AD119F08B9EF0E0BCE48037574EA26F786F4D9C45DA76B7F769B278053A932930372EDDBF10AB21C2A33FADC997250445D6BD71A

** HMAC-512 text input
#+HEADER: :var KEY = "test"
#+HEADER: :var MSG = "more and more data goes into a file to exceed the buffer size"
#+begin_src janet
  (use botan)
  (let [mac (mac/new "HMAC(SHA-512)")]
    (:update (:set-key mac KEY) MSG)
    (print (hex-encode (:final mac))))
#+end_src

#+RESULTS:
: 5B2B459E89ECD204BEB959DC6214A4C4B7DA20BFC4C8ADACF9615BDDD0B2B8D2E950409E4703DE11F02E50852EDFB3CFBDAF8795E0EBF0AD50CF15E29150D234

** AES-128 CMAC
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var DATA = "000102030405060708090A0B0C0D0E0F"
#+begin_src janet
  (use botan)
  (let [mac (mac/new "CMAC(AES-128)")]
    (:update (:set-key mac (hex-decode KEY)) (hex-decode DATA))
    (print "TAG: " (hex-encode (:final mac))))
#+end_src

#+RESULTS:
: TAG: 7BCFBBCA7A2EA68B966FC5399F74809E

#+end_src
** AES-128 GMAC
#+HEADER: :var KEY   = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var NONCE = "FFFFFFFFFFFFFFFFFFFFFFFF"
#+HEADER: :var DATA  = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [mac (mac/new "GMAC(AES-128)")]
    (:set-key mac (hex-decode KEY))
    (:set-nonce mac (hex-decode NONCE))
    (:update mac (hex-decode DATA))
    (print "TAG: " (hex-encode (:final mac))))
#+end_src

#+RESULTS:
: TAG: 0474FA92425A16FA4404824A00398C74

#+end_src
** AES-192 GMAC
#+HEADER: :var KEY   = "000102030405060708090A0B0C0D0E0F0001020304050607"
#+HEADER: :var NONCE = "FFFFFFFFFFFFFFFFFFFFFFFF"
#+HEADER: :var DATA  = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [mac (mac/new "GMAC(AES-192)")]
    (:set-key mac (hex-decode KEY))
    (:set-nonce mac (hex-decode NONCE))
    (:update mac (hex-decode DATA))
    (print "TAG: " (hex-encode (:final mac))))
#+end_src

#+RESULTS:
: TAG: FE47D853E827FCA47BB5E87D0F6423B8

#+end_src
** AES-256 GMAC
#+HEADER: :var KEY   = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var NONCE = "FFFFFFFFFFFFFFFFFFFFFFFF"
#+HEADER: :var DATA  = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [mac (mac/new "GMAC(AES-256)")]
    (:set-key mac (hex-decode KEY))
    (:set-nonce mac (hex-decode NONCE))
    (:update mac (hex-decode DATA))
    (print "TAG: " (hex-encode (:final mac))))
#+end_src

#+RESULTS:
: TAG: 65DC9D99AB0FF0F31351A169DC0EC101

#+end_src
** ARIA-128 GMAC
#+HEADER: :var KEY   = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var NONCE = "FFFFFFFFFFFFFFFFFFFFFFFF"
#+HEADER: :var DATA  = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [mac (mac/new "GMAC(ARIA-128)")]
    (:set-key mac (hex-decode KEY))
    (:set-nonce mac (hex-decode NONCE))
    (:update mac (hex-decode DATA))
    (print "TAG: " (hex-encode (:final mac))))
#+end_src

#+RESULTS:
: TAG: 62B01592621FEACB86CCCC541CC9D169

#+end_src
** ARIA-192 GMAC
#+HEADER: :var KEY   = "000102030405060708090A0B0C0D0E0F0001020304050607"
#+HEADER: :var NONCE = "FFFFFFFFFFFFFFFFFFFFFFFF"
#+HEADER: :var DATA  = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [mac (mac/new "GMAC(ARIA-192)")]
    (:set-key mac (hex-decode KEY))
    (:set-nonce mac (hex-decode NONCE))
    (:update mac (hex-decode DATA))
    (print "TAG: " (hex-encode (:final mac))))
#+end_src

#+RESULTS:
: TAG: F0B6264439A0EBDD043ECFDED8A268E8

#+end_src
** ARIA-256 GMAC
#+HEADER: :var KEY   = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var NONCE = "FFFFFFFFFFFFFFFFFFFFFFFF"
#+HEADER: :var DATA  = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [mac (mac/new "GMAC(ARIA-256)")]
    (:set-key mac (hex-decode KEY))
    (:set-nonce mac (hex-decode NONCE))
    (:update mac (hex-decode DATA))
    (print "TAG: " (hex-encode (:final mac))))
#+end_src

#+RESULTS:
: TAG: E0DED6F693CEEFAE2C10DF84EDE5BC15

#+end_src

* AES
** AES-128
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var TEXT = "00112233445566778899AABBCCDDEEFF"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "AES-128")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:encrypt bc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 69C4E0D86A7B0430D8CDB78070B4C55A

*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "69C4E0D86A7B0430D8CDB78070B4C55A"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "AES-128")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:decrypt bc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 00112233445566778899AABBCCDDEEFF

** AES-192
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F0001020304050607"
#+HEADER: :var TEXT = "00112233445566778899AABBCCDDEEFF"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "AES-192")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:encrypt bc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 65D50128B115A7780981475A6BD64A0E

*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F0001020304050607"
#+HEADER: :var ENCRYPTED = "65D50128B115A7780981475A6BD64A0E"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "AES-192")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:decrypt bc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 00112233445566778899AABBCCDDEEFF

** AES-256
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"
#+HEADER: :var TEXT = "00112233445566778899AABBCCDDEEFF"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "AES-256")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:encrypt bc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 8EA2B7CA516745BFEAFC49904B496089
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"
#+HEADER: :var ENCRYPTED = "8EA2B7CA516745BFEAFC49904B496089"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "AES-256")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:decrypt bc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 00112233445566778899AABBCCDDEEFF
** AES-GCM-128
*** Encrypt
#+HEADER: :var KEY  = "00112233445566778899AABBCCDDEEFF"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var IV   = "112233445566778899AABBCC"
#+HEADER: :var AAD  = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/GCM" :encrypt)
       tag-len (:get-tag-length sc)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (def ret (hex-encode (:finish sc (hex-decode TEXT))))
    (print "Enc: " (string/slice ret 0 (- (length ret) (* 2 tag-len))))
    (print "Tag: " (string/slice ret (- (length ret) (* 2 tag-len)))))
#+end_src

#+RESULTS:
: Enc: 565680A8B07A8E5AFE067D91B9168154
: Tag: 343EF77F1C6DE85BB313B51E9AAD2291
*** Decrypt
#+HEADER: :var KEY       = "00112233445566778899AABBCCDDEEFF"
#+HEADER: :var ENCRYPTED = "565680A8B07A8E5AFE067D91B9168154"
#+HEADER: :var INPUT_TAG = "343EF77F1C6DE85BB313B51E9AAD2291"
#+HEADER: :var IV        = "112233445566778899AABBCC"
#+HEADER: :var AAD       = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/GCM" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode (string ENCRYPTED INPUT_TAG))))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** AES-GCM-192
*** Encrypt
#+HEADER: :var KEY  = "00112233445566778899AABBCCDDEEFF0011223344556677"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var IV   = "112233445566778899AABBCC"
#+HEADER: :var AAD  = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-192/GCM" :encrypt)
       tag-len (:get-tag-length sc)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (def ret (hex-encode (:finish sc (hex-decode TEXT))))
    (print "Enc: " (string/slice ret 0 (- (length ret) (* 2 tag-len))))
    (print "Tag: " (string/slice ret (- (length ret) (* 2 tag-len)))))
#+end_src

#+RESULTS:
: Enc: 545DD08DF08C14CA7100400B4A3833DD
: Tag: 94F0FA724CA153D25C5F95A007FC9BD6

*** Decrypt
#+HEADER: :var KEY       = "00112233445566778899AABBCCDDEEFF0011223344556677"
#+HEADER: :var ENCRYPTED = "545DD08DF08C14CA7100400B4A3833DD"
#+HEADER: :var INPUT_TAG = "94F0FA724CA153D25C5F95A007FC9BD6"
#+HEADER: :var IV        = "112233445566778899AABBCC"
#+HEADER: :var AAD       = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-192/GCM" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode (string ENCRYPTED INPUT_TAG))))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** AES-GCM-256
*** Encrypt
#+HEADER: :var KEY  = "00112233445566778899AABBCCDDEEFF00112233445566778899AABBCCDDEEFF"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var IV   = "112233445566778899AABBCC"
#+HEADER: :var AAD  = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-256/GCM" :encrypt)
       tag-len (:get-tag-length sc)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (def ret (hex-encode (:finish sc (hex-decode TEXT))))
    (print "Enc: " (string/slice ret 0 (- (length ret) (* 2 tag-len))))
    (print "Tag: " (string/slice ret (- (length ret) (* 2 tag-len)))))
#+end_src

#+RESULTS:
: Enc: D9AB5267E66C88BA53BD3EB1D877E958
: Tag: C7FE61A04359304E950A454644C12C88

*** Decrypt
#+HEADER: :var KEY       = "00112233445566778899AABBCCDDEEFF00112233445566778899AABBCCDDEEFF"
#+HEADER: :var ENCRYPTED = "D9AB5267E66C88BA53BD3EB1D877E958"
#+HEADER: :var INPUT_TAG = "C7FE61A04359304E950A454644C12C88"
#+HEADER: :var IV        = "112233445566778899AABBCC"
#+HEADER: :var AAD       = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-256/GCM" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode (string ENCRYPTED INPUT_TAG))))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
*** Encrypt text string
#+HEADER: :var KEY  = "00112233445566778899AABBCCDDEEFF00112233445566778899AABBCCDDEEFF"
#+HEADER: :var TEXT = "string text input"
#+HEADER: :var IV   = "112233445566778899AABBCC"
#+HEADER: :var AAD  = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-256/GCM" :encrypt)
       tag-len (:get-tag-length sc)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (def ret (hex-encode (:finish sc TEXT)))
    (print "Enc: " (string/slice ret 0 (- (length ret) (* 2 tag-len))))
    (print "Tag: " (string/slice ret (- (length ret) (* 2 tag-len)))))
#+end_src

#+RESULTS:
: Enc: BAFF104ED86BD84EA665FA5161F9692DA4
: Tag: 5E11C2B9BBFBD7D4B4B84BDCF0DDB280

*** Decrypt to text string
#+HEADER: :var KEY       = "00112233445566778899AABBCCDDEEFF00112233445566778899AABBCCDDEEFF"
#+HEADER: :var ENCRYPTED = "BAFF104ED86BD84EA665FA5161F9692DA4"
#+HEADER: :var INPUT_TAG = "5E11C2B9BBFBD7D4B4B84BDCF0DDB280"
#+HEADER: :var IV        = "112233445566778899AABBCC"
#+HEADER: :var AAD       = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-256/GCM" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (print (:finish sc (hex-decode (string ENCRYPTED INPUT_TAG)))))
#+end_src

#+RESULTS:
: string text input
** AES-CBC-128 NoPadding
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/CBC/NoPadding" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: A28F5667E6CE191444647F5B2E570AE8
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var ENCRYPTED = "A28F5667E6CE191444647F5B2E570AE8"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/CBC/NoPadding" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** AES-CBC-128 PKCS7 Padding
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/CBC/PKCS7" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: A28F5667E6CE191444647F5B2E570AE8644F7CE15636077CFB9ADD5CD87FC6C6
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "A28F5667E6CE191444647F5B2E570AE8644F7CE15636077CFB9ADD5CD87FC6C6"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/CBC/PKCS7" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** AES-CBC-128 OneAndZeros Padding
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/CBC/OneAndZeros" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: A28F5667E6CE191444647F5B2E570AE8726BB1394D7F883A0A298EE1D9510E64
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "A28F5667E6CE191444647F5B2E570AE8726BB1394D7F883A0A298EE1D9510E64"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/CBC/OneAndZeros" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** AES-CBC-256 PKCS7 Padding
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-256/CBC/PKCS7" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 19F01F6269952794B3714810E26BE3D5E6267DFE058BF54D4E377CBD3E434FD4
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "19F01F6269952794B3714810E26BE3D5E6267DFE058BF54D4E377CBD3E434FD4"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-256/CBC/PKCS7" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** AES-CBC-256 OneAndZeros Padding
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var TEXT = "112233445566665544332211"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-256/CBC/OneAndZeros" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 7B1803081258477C997943AE6EDD290C
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "7B1803081258477C997943AE6EDD290C"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-256/CBC/OneAndZeros" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 112233445566665544332211
** AES-CTR-128
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var TEXT = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/CTR" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 0DBFDF84A3810CE19DD7394598DE505F1E0ED42DFBBD7EB164BE5DA7F5CD5C23
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var ENCRYPTED = "0DBFDF84A3810CE19DD7394598DE505F1E0ED42DFBBD7EB164BE5DA7F5CD5C23"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/CTR" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F
** AES-CCM-128
*** Encrypt
#+HEADER: :var KEY   = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var TEXT  = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var NONCE = "FFFFFFFFFFFFFFFFFFFFFFFF"
#+HEADER: :var AAD   = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/CCM" :encrypt)
       tag-len (:get-tag-length sc)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode NONCE))
    (def ret (hex-encode (:finish sc (hex-decode TEXT))))
    (print "Enc: " (string/slice ret 0 (- (length ret) (* 2 tag-len))))
    (print "Tag: " (string/slice ret (- (length ret) (* 2 tag-len)))))
#+end_src

#+RESULTS:
: Enc: 326AD41E63D474A45618919268C45AF2
: Tag: FF60D3CC73E4E6EF95BBB13616C3AE27
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "326AD41E63D474A45618919268C45AF2"
#+HEADER: :var INPUT_TAG = "FF60D3CC73E4E6EF95BBB13616C3AE27"
#+HEADER: :var NONCE     = "FFFFFFFFFFFFFFFFFFFFFFFF"
#+HEADER: :var AAD       = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "AES-128/CCM" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode NONCE))
    (print (hex-encode (:finish sc (hex-decode (string ENCRYPTED INPUT_TAG))))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000

* NIST AES key wrapper (RFC3394)
** Wrap
#+HEADER: :var KEK = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var KEY = "00112233445566778899AABBCCDDEEFF"
#+begin_src janet
  (use botan)
  (print (hex-encode (nist-key-wrap (hex-decode KEK) (hex-decode KEY))))
#+end_src

#+RESULTS:
: 1FA68B0A8112B447AEF34BD8FB5A7B829D3E862371D2CFE5
** Unwrap
#+HEADER: :var KEK = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var WRAPPED_KEY = "1FA68B0A8112B447AEF34BD8FB5A7B829D3E862371D2CFE5"
#+begin_src janet
  (use botan)
  (print (hex-encode (nist-key-unwrap (hex-decode KEK) (hex-decode WRAPPED_KEY))))
#+end_src

#+RESULTS:
: 00112233445566778899AABBCCDDEEFF

* ARIA
** ARIA-128
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var TEXT = "00112233445566778899AABBCCDDEEFF"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "ARIA-128")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:encrypt bc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: D718FBD6AB644C739DA95F3BE6451778

*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "D718FBD6AB644C739DA95F3BE6451778"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "ARIA-128")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:decrypt bc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 00112233445566778899AABBCCDDEEFF

** ARIA-192
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F0001020304050607"
#+HEADER: :var TEXT = "00112233445566778899AABBCCDDEEFF"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "ARIA-192")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:encrypt bc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 0DEDEC2A613869147C86397A97CA44F6

*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F0001020304050607"
#+HEADER: :var ENCRYPTED = "0DEDEC2A613869147C86397A97CA44F6"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "ARIA-192")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:decrypt bc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 00112233445566778899AABBCCDDEEFF

** ARIA-256
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"
#+HEADER: :var TEXT = "00112233445566778899AABBCCDDEEFF"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "ARIA-256")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:encrypt bc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: F92BD7C79FB72E2F2B8F80C1972D24FC
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F"
#+HEADER: :var ENCRYPTED = "F92BD7C79FB72E2F2B8F80C1972D24FC"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "ARIA-256")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:decrypt bc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 00112233445566778899AABBCCDDEEFF
** ARIA-GCM-128
*** Encrypt
#+HEADER: :var KEY  = "00112233445566778899AABBCCDDEEFF"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var IV   = "112233445566778899AABBCC"
#+HEADER: :var AAD  = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/GCM" :encrypt)
       tag-len (:get-tag-length sc)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (def ret (hex-encode (:finish sc (hex-decode TEXT))))
    (print "Enc: " (string/slice ret 0 (- (length ret) (* 2 tag-len))))
    (print "Tag: " (string/slice ret (- (length ret) (* 2 tag-len)))))
#+end_src

#+RESULTS:
: Enc: B2949DD080ADFFA66C72BE18A3817CF3
: Tag: B7DFC8E22C8C3212AD7ACED059966E7A
*** Decrypt
#+HEADER: :var KEY       = "00112233445566778899AABBCCDDEEFF"
#+HEADER: :var ENCRYPTED = "B2949DD080ADFFA66C72BE18A3817CF3"
#+HEADER: :var INPUT_TAG = "B7DFC8E22C8C3212AD7ACED059966E7A"
#+HEADER: :var IV        = "112233445566778899AABBCC"
#+HEADER: :var AAD       = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/GCM" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode (string ENCRYPTED INPUT_TAG))))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** ARIA-GCM-192
*** Encrypt
#+HEADER: :var KEY  = "00112233445566778899AABBCCDDEEFF0011223344556677"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var IV   = "112233445566778899AABBCC"
#+HEADER: :var AAD  = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-192/GCM" :encrypt)
       tag-len (:get-tag-length sc)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (def ret (hex-encode (:finish sc (hex-decode TEXT))))
    (print "Enc: " (string/slice ret 0 (- (length ret) (* 2 tag-len))))
    (print "Tag: " (string/slice ret (- (length ret) (* 2 tag-len)))))
#+end_src

#+RESULTS:
: Enc: E203BFFE67525F15E258F465418F9378
: Tag: 7AEBC287AE39724DB396BE4105808CD4

*** Decrypt
#+HEADER: :var KEY       = "00112233445566778899AABBCCDDEEFF0011223344556677"
#+HEADER: :var ENCRYPTED = "E203BFFE67525F15E258F465418F9378"
#+HEADER: :var INPUT_TAG = "7AEBC287AE39724DB396BE4105808CD4"
#+HEADER: :var IV        = "112233445566778899AABBCC"
#+HEADER: :var AAD       = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-192/GCM" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode (string ENCRYPTED INPUT_TAG))))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** ARIA-GCM-256
*** Encrypt
#+HEADER: :var KEY  = "00112233445566778899AABBCCDDEEFF00112233445566778899AABBCCDDEEFF"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var IV   = "112233445566778899AABBCC"
#+HEADER: :var AAD  = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-256/GCM" :encrypt)
       tag-len (:get-tag-length sc)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (def ret (hex-encode (:finish sc (hex-decode TEXT))))
    (print "Enc: " (string/slice ret 0 (- (length ret) (* 2 tag-len))))
    (print "Tag: " (string/slice ret (- (length ret) (* 2 tag-len)))))
#+end_src

#+RESULTS:
: Enc: 5FD6F4743CC128D4692E467AC7082F48
: Tag: 4A85EA53925DA74964CE1BE7F38A3840

*** Decrypt
#+HEADER: :var KEY       = "00112233445566778899AABBCCDDEEFF00112233445566778899AABBCCDDEEFF"
#+HEADER: :var ENCRYPTED = "5FD6F4743CC128D4692E467AC7082F48"
#+HEADER: :var INPUT_TAG = "4A85EA53925DA74964CE1BE7F38A3840"
#+HEADER: :var IV        = "112233445566778899AABBCC"
#+HEADER: :var AAD       = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-256/GCM" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode (string ENCRYPTED INPUT_TAG))))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
*** Encrypt text string
#+HEADER: :var KEY  = "00112233445566778899AABBCCDDEEFF00112233445566778899AABBCCDDEEFF"
#+HEADER: :var TEXT = "string text input"
#+HEADER: :var IV   = "112233445566778899AABBCC"
#+HEADER: :var AAD  = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-256/GCM" :encrypt)
       tag-len (:get-tag-length sc)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (def ret (hex-encode (:finish sc TEXT)))
    (print "Enc: " (string/slice ret 0 (- (length ret) (* 2 tag-len))))
    (print "Tag: " (string/slice ret (- (length ret) (* 2 tag-len)))))
#+end_src

#+RESULTS:
: Enc: 3C82B65D02C678209CF6829A7E86AF3D17
: Tag: A75370B9E717F73875F02E4491FB022D

*** Decrypt to text string
#+HEADER: :var KEY       = "00112233445566778899AABBCCDDEEFF00112233445566778899AABBCCDDEEFF"
#+HEADER: :var ENCRYPTED = "3C82B65D02C678209CF6829A7E86AF3D17"
#+HEADER: :var INPUT_TAG = "A75370B9E717F73875F02E4491FB022D"
#+HEADER: :var IV        = "112233445566778899AABBCC"
#+HEADER: :var AAD       = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-256/GCM" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode IV))
    (print (:finish sc (hex-decode (string ENCRYPTED INPUT_TAG)))))
#+end_src

#+RESULTS:
: string text input
** ARIA-CBC-128 NoPadding
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/CBC/NoPadding" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 63792CEE6F18F62170822C347775F71D
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var ENCRYPTED = "63792CEE6F18F62170822C347775F71D"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/CBC/NoPadding" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** ARIA-CBC-128 PKCS7 Padding
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/CBC/PKCS7" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 63792CEE6F18F62170822C347775F71D31D9563961808005B878F605CB708BC5
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "63792CEE6F18F62170822C347775F71D31D9563961808005B878F605CB708BC5"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/CBC/PKCS7" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** ARIA-CBC-128 OneAndZeros Padding
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/CBC/OneAndZeros" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 63792CEE6F18F62170822C347775F71D7087D01EA5677EEAF8FA23720BDB91AB
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "63792CEE6F18F62170822C347775F71D7087D01EA5677EEAF8FA23720BDB91AB"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/CBC/OneAndZeros" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** ARIA-CBC-256 PKCS7 Padding
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var TEXT = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-256/CBC/PKCS7" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: EE7BF3D64A28A69B6376C8281FE411708592C33960629AF398F16B854B50E8DA
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "EE7BF3D64A28A69B6376C8281FE411708592C33960629AF398F16B854B50E8DA"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-256/CBC/PKCS7" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000
** ARIA-CBC-256 OneAndZeros Padding
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var TEXT = "112233445566665544332211"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-256/CBC/OneAndZeros" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: E893C170CFF6E847CFC1DA42925169A7
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "E893C170CFF6E847CFC1DA42925169A7"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-256/CBC/OneAndZeros" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 112233445566665544332211
** ARIA-CTR-128
*** Encrypt
#+HEADER: :var KEY  = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV   = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var TEXT = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/CTR" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: EFFC474AE70949DA46BF4F713207ECA663E24C8E569ECC950E7B3C550F44F60A
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var IV        = "112233445566778899AABBCCDDEEFF00"
#+HEADER: :var ENCRYPTED = "EFFC474AE70949DA46BF4F713207ECA663E24C8E569ECC950E7B3C550F44F60A"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/CTR" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F
** ARIA-CCM-128
*** Encrypt
#+HEADER: :var KEY   = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var TEXT  = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var NONCE = "FFFFFFFFFFFFFFFFFFFFFFFF"
#+HEADER: :var AAD   = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/CCM" :encrypt)
       tag-len (:get-tag-length sc)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode NONCE))
    (def ret (hex-encode (:finish sc (hex-decode TEXT))))
    (print "Enc: " (string/slice ret 0 (- (length ret) (* 2 tag-len))))
    (print "Tag: " (string/slice ret (- (length ret) (* 2 tag-len)))))
#+end_src

#+RESULTS:
: Enc: A093B40F96657DFC7B2DE4DC1E7A70B9
: Tag: 25895A5116F0A697D619D59E29DEDD36
*** Decrypt
#+HEADER: :var KEY       = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var ENCRYPTED = "A093B40F96657DFC7B2DE4DC1E7A70B9"
#+HEADER: :var INPUT_TAG = "25895A5116F0A697D619D59E29DEDD36"
#+HEADER: :var NONCE     = "FFFFFFFFFFFFFFFFFFFFFFFF"
#+HEADER: :var AAD       = "0102030405060708090A0B0C0D0E"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "ARIA-128/CCM" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:set-associated-data sc (hex-decode AAD))
    (:start sc (hex-decode NONCE))
    (print (hex-encode (:finish sc (hex-decode (string ENCRYPTED INPUT_TAG))))))
#+end_src

#+RESULTS:
: 102030405060708090A0B0C0D0E0F000

* DES
** DES
*** Encrypt
#+HEADER: :var KEY  = "0001020304050607"
#+HEADER: :var TEXT = "0011223344556677"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "DES")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:encrypt bc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 3EF0A891CF8ED990

*** Decrypt
#+HEADER: :var KEY       = "0001020304050607"
#+HEADER: :var ENCRYPTED = "3EF0A891CF8ED990"
#+begin_src janet
  (use botan)
  (let [bc (block-cipher/new "DES")]
    (:set-key bc (hex-decode KEY))
    (print (hex-encode (:decrypt bc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 0011223344556677

** DES-CBC NoPadding
*** Encrypt
#+HEADER: :var KEY  = "0001020304050607"
#+HEADER: :var IV   = "1122334455667788"
#+HEADER: :var TEXT = "1020304050607080"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "DES/CBC/NoPadding" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 6ACC204F8EFBCCC7
*** Decrypt
#+HEADER: :var KEY       = "0001020304050607"
#+HEADER: :var IV        = "1122334455667788"
#+HEADER: :var ENCRYPTED = "6ACC204F8EFBCCC7"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "DES/CBC/NoPadding" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 1020304050607080
** DES-CBC PKCS7 Padding
*** Encrypt
#+HEADER: :var KEY  = "0001020304050607"
#+HEADER: :var IV   = "1122334455667788"
#+HEADER: :var TEXT = "1020304050607080"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "DES/CBC/PKCS7" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 6ACC204F8EFBCCC7C80EE4F58CA1A2E5
*** Decrypt
#+HEADER: :var KEY       = "0001020304050607"
#+HEADER: :var IV        = "1122334455667788"
#+HEADER: :var ENCRYPTED = "6ACC204F8EFBCCC7C80EE4F58CA1A2E5"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "DES/CBC/PKCS7" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 1020304050607080
** DES-CBC OneAndZeros Padding
*** Encrypt
#+HEADER: :var KEY  = "0001020304050607"
#+HEADER: :var IV   = "1122334455667788"
#+HEADER: :var TEXT = "1020304050607080"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "DES/CBC/OneAndZeros" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: 6ACC204F8EFBCCC7FD7B57744B67C0A9
*** Decrypt
#+HEADER: :var KEY       = "0001020304050607"
#+HEADER: :var IV        = "1122334455667788"
#+HEADER: :var ENCRYPTED = "6ACC204F8EFBCCC7FD7B57744B67C0A9"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "DES/CBC/OneAndZeros" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 1020304050607080
** DES-CTR
*** Encrypt
#+HEADER: :var KEY  = "0001020304050607"
#+HEADER: :var IV   = "1122334455667788"
#+HEADER: :var TEXT = "1020304050607080"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "DES/CTR" :encrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode TEXT)))))
#+end_src

#+RESULTS:
: DC958B81223682A7
*** Decrypt
#+HEADER: :var KEY       = "0001020304050607"
#+HEADER: :var IV        = "1122334455667788"
#+HEADER: :var ENCRYPTED = "DC958B81223682A7"
#+begin_src janet
  (use botan)
  (let [sc (cipher/new "DES/CTR" :decrypt)]
    (:set-key sc (hex-decode KEY))
    (:start sc (hex-decode IV))
    (print (hex-encode (:finish sc (hex-decode ENCRYPTED)))))
#+end_src

#+RESULTS:
: 1020304050607080

* ECDH
** Random key - Create sessionkey
#+HEADER: :var TEXT        = "test msg"
#+begin_src janet
  (use botan)
  (let [prikey1 (privkey/new "ECDH" "secp256r1")
        prikey2 (privkey/new "ECDH" "secp256r1")
        pubkey1 (:get-pubkey prikey1)
        pubkey2 (:get-pubkey prikey2)
        prikey1-val (:to-bin (:get-field prikey1 "x"))
        prikey2-val (:to-bin (:get-field prikey2 "x"))
        pubkey1-val (:get-public-point pubkey1)
        pubkey2-val (:get-public-point pubkey2)
        pk-ka1 (pk-key-agreement/new prikey1 "KDF2(SHA-256)")
        pk-ka2 (pk-key-agreement/new prikey2 "KDF2(SHA-256)")
        salt (:get (rng/new) 64)
        agreekey1 (:agree pk-ka1 pubkey2-val salt)
        agreekey2 (:agree pk-ka2 pubkey1-val salt)
       ]
    (print "prikeyA: " (hex-encode prikey1-val))
    (print "prikeyB: " (hex-encode prikey2-val))
    (print "pubkeyA: " (hex-encode pubkey1-val))
    (print "pubkeyB: " (hex-encode pubkey2-val))
    (print "agreekeyA: " (hex-encode agreekey1))
    (print "agreekeyB: " (hex-encode agreekey2)))
#+end_src

#+RESULTS:
: prikeyA: 3ED35510A13ACD3898739A734FDDF004164A5926958744BB3C0922F90C87DEAC
: prikeyB: E79314FC2CE53087E0FE9220F3BB4FB69ED62CF9C737EE726ECD3F4BDC824971
: pubkeyA: 04B7753571D532C46E4B52DFB4DD6162434AB48BCA194A5B1428270071D8F329FC6FAB4B19880A950D499F36131BE34A35CC7BF993D78E36F7184FB66DAFD0E57A
: pubkeyB: 049520530DC2D9271EE29359B3AAFA632F75334D867A5F2ADEE445C518F5B8608721034917AF16FF228D2C351F5021BB67C5530DBFAD2E312A5C1BCDDDBA42A4B1
: agreekeyA: 8C9CFF975CF2C2F24EBF36B34CA31EFE3BFAFBB21D650B3560CAE2C0D16512BB
: agreekeyB: 8C9CFF975CF2C2F24EBF36B34CA31EFE3BFAFBB21D650B3560CAE2C0D16512BB

** Existing key(Hex) - Create sessionkey (Public key can be omitted)
#+HEADER: :var A_PRIVATE_KEY = "272381629D174EAD2F3939F2FFDCFCFDAFB5885E789EBA30969127F6B6E8F8E2"
#+HEADER: :var A_PUBLIC_KEY  = "048D05F3D3FC92A06F97B3D6861D0C9425483E16E2F6AA2729F99211FF1B364E10A46B47A96EF995785245FC5302EF45A0D5EF1486B9865603969118D455AFBB53"
#+HEADER: :var B_PRIVATE_KEY = "EBF6E5A05A4AC0D1D2B2A629BF808B50B51DB7ED5E7CBAE968783C925FCC679D"
#+HEADER: :var B_PUBLIC_KEY  = "04EFB6C4A48C69D85C6831922530536FE4500D16F90A454960465CDBF178E4728373D41625F3906A69107463FDD0FA03A1C4E1EB619968DEFEB41D1338B65049D4"
#+begin_src janet
  (use botan)
  (let [prikey1-mpi (mpi/from-hex-str A_PRIVATE_KEY)
        prikey2-mpi (mpi/from-hex-str B_PRIVATE_KEY)

        pubkey1-mpi-x (mpi/from-hex-str (string/slice A_PUBLIC_KEY 2 (+ 2 (/ (- (length A_PUBLIC_KEY) 2) 2))))
        pubkey1-mpi-y (mpi/from-hex-str (string/slice A_PUBLIC_KEY (+ 2 (/ (- (length A_PUBLIC_KEY) 2) 2))))

        pubkey2-mpi-x (mpi/from-hex-str (string/slice B_PUBLIC_KEY 2 (+ 2 (/ (- (length B_PUBLIC_KEY) 2) 2))))
        pubkey2-mpi-y (mpi/from-hex-str (string/slice B_PUBLIC_KEY (+ 2 (/ (- (length B_PUBLIC_KEY) 2) 2))))

        prikey1 (privkey/load-ecdh "secp256r1" prikey1-mpi)
        prikey2 (privkey/load-ecdh "secp256r1" prikey2-mpi)

        pubkey1 (pubkey/load-ecdh "secp256r1" pubkey1-mpi-x pubkey1-mpi-y)
        pubkey2 (pubkey/load-ecdh "secp256r1" pubkey2-mpi-x pubkey2-mpi-y)

        pubkey1-from-pri (:get-pubkey prikey1)
        pubkey2-from-pri (:get-pubkey prikey2)

        pk-ka (pk-key-agreement/new prikey1 "Raw")
        agreekey (:agree pk-ka (:get-public-point pubkey2) "")]
    (assert (= (:get-public-point pubkey1) (:get-public-point pubkey1-from-pri)))
    (assert (= (:get-public-point pubkey2) (:get-public-point pubkey2-from-pri)))

    (print "prikeyA: " (hex-encode (:to-bin prikey1-mpi)))
    (print "prikeyB: " (hex-encode (:to-bin prikey2-mpi)))
    (print "pubkeyA: " (hex-encode (:get-public-point pubkey1)))
    (print "pubkeyB: " (hex-encode (:get-public-point pubkey2)))
    (print "agreekey: " (hex-encode agreekey)))
#+end_src

#+RESULTS:
: prikeyA: 272381629D174EAD2F3939F2FFDCFCFDAFB5885E789EBA30969127F6B6E8F8E2
: prikeyB: EBF6E5A05A4AC0D1D2B2A629BF808B50B51DB7ED5E7CBAE968783C925FCC679D
: pubkeyA: 048D05F3D3FC92A06F97B3D6861D0C9425483E16E2F6AA2729F99211FF1B364E10A46B47A96EF995785245FC5302EF45A0D5EF1486B9865603969118D455AFBB53
: pubkeyB: 04EFB6C4A48C69D85C6831922530536FE4500D16F90A454960465CDBF178E4728373D41625F3906A69107463FDD0FA03A1C4E1EB619968DEFEB41D1338B65049D4
: agreekey: 3C027AF77D256133E465CE56ABC1CF31B3D428FD5FE528A4481BCF5D295DAA69

** Existing key(Big Int) - Create sessionkey
#+HEADER: :var A_PRIVATE_KEY = "17702933725911759833018382133741290876335542967772335450363342488878254192866"
#+HEADER: :var A_PUBLIC_KEY  = "61017218725251769835925365666700278871445386965526678184487919969123210546842177730340048341794298839866705223449066751284256420111064842794150013009115987"
#+HEADER: :var B_PRIVATE_KEY = "106729748618016823529684004271423234939788438170848142794308826289302701631389"
#+HEADER: :var B_PUBLIC_KEY  = "66186069373064324507716733592744495348638623787425372736469519431587026981344737339468148830286137966427921162803027707669848205986009555327089307961805268"
#+begin_src janet
  (use botan)
  (let [prikey1-hex (hex-encode (:to-bin (mpi/from-str A_PRIVATE_KEY)))
        prikey2-hex (hex-encode (:to-bin (mpi/from-str B_PRIVATE_KEY)))
        pubkey1-hex (hex-encode (:to-bin (mpi/from-str A_PUBLIC_KEY)))
        pubkey2-hex (hex-encode (:to-bin (mpi/from-str B_PUBLIC_KEY)))

        prikey1-mpi (mpi/from-str A_PRIVATE_KEY)
        prikey2-mpi (mpi/from-str B_PRIVATE_KEY)

        pubkey1-mpi-x (mpi/from-hex-str (string/slice pubkey1-hex 2 (+ 2 (/ (- (length pubkey1-hex) 2) 2))))
        pubkey1-mpi-y (mpi/from-hex-str (string/slice pubkey1-hex (+ 2 (/ (- (length pubkey1-hex) 2) 2))))

        pubkey2-mpi-x (mpi/from-hex-str (string/slice pubkey2-hex 2 (+ 2 (/ (- (length pubkey2-hex) 2) 2))))
        pubkey2-mpi-y (mpi/from-hex-str (string/slice pubkey2-hex (+ 2 (/ (- (length pubkey2-hex) 2) 2))))

        prikey1 (privkey/load-ecdh "secp256r1" prikey1-mpi)
        prikey2 (privkey/load-ecdh "secp256r1" prikey2-mpi)

        pubkey1 (pubkey/load-ecdh "secp256r1" pubkey1-mpi-x pubkey1-mpi-y)
        pubkey2 (pubkey/load-ecdh "secp256r1" pubkey2-mpi-x pubkey2-mpi-y)

        pubkey1-from-pri (:get-pubkey prikey1)
        pubkey2-from-pri (:get-pubkey prikey2)

        pk-ka (pk-key-agreement/new prikey1 "Raw")
        agreekey (:agree pk-ka (:get-public-point pubkey2) "")]
    (assert (= (:get-public-point pubkey1) (:get-public-point pubkey1-from-pri)))
    (assert (= (:get-public-point pubkey2) (:get-public-point pubkey2-from-pri)))

    (print "prikeyA: " (hex-encode (:to-bin prikey1-mpi)))
    (print "prikeyB: " (hex-encode (:to-bin prikey2-mpi)))
    (print "pubkeyA: " (hex-encode (:get-public-point pubkey1)))
    (print "pubkeyB: " (hex-encode (:get-public-point pubkey2)))
    (print "agreekey: " (hex-encode agreekey)))
#+end_src

#+RESULTS:
: prikeyA: 272381629D174EAD2F3939F2FFDCFCFDAFB5885E789EBA30969127F6B6E8F8E2
: prikeyB: EBF6E5A05A4AC0D1D2B2A629BF808B50B51DB7ED5E7CBAE968783C925FCC679D
: pubkeyA: 048D05F3D3FC92A06F97B3D6861D0C9425483E16E2F6AA2729F99211FF1B364E10A46B47A96EF995785245FC5302EF45A0D5EF1486B9865603969118D455AFBB53
: pubkeyB: 04EFB6C4A48C69D85C6831922530536FE4500D16F90A454960465CDBF178E4728373D41625F3906A69107463FDD0FA03A1C4E1EB619968DEFEB41D1338B65049D4
: agreekey: 3C027AF77D256133E465CE56ABC1CF31B3D428FD5FE528A4481BCF5D295DAA69

** Existing key(Hex) - Create sessionkey with PriKey A, PubKey B
#+HEADER: :var A_PRIVATE_KEY = "272381629D174EAD2F3939F2FFDCFCFDAFB5885E789EBA30969127F6B6E8F8E2"
#+HEADER: :var B_PUBLIC_KEY  = "04EFB6C4A48C69D85C6831922530536FE4500D16F90A454960465CDBF178E4728373D41625F3906A69107463FDD0FA03A1C4E1EB619968DEFEB41D1338B65049D4"
#+begin_src janet
  (use botan)
  (let [prikey1-mpi (mpi/from-hex-str A_PRIVATE_KEY)

        pubkey2-mpi-x (mpi/from-hex-str (string/slice B_PUBLIC_KEY 2 (+ 2 (/ (- (length B_PUBLIC_KEY) 2) 2))))
        pubkey2-mpi-y (mpi/from-hex-str (string/slice B_PUBLIC_KEY (+ 2 (/ (- (length B_PUBLIC_KEY) 2) 2))))

        prikey1 (privkey/load-ecdh "secp256r1" prikey1-mpi)
        pubkey2 (pubkey/load-ecdh "secp256r1" pubkey2-mpi-x pubkey2-mpi-y)

        pk-ka (pk-key-agreement/new prikey1 "Raw")
        agreekey (:agree pk-ka (:get-public-point pubkey2) "")]
    (print "prikeyA: " (hex-encode (:to-bin prikey1-mpi)))
    (print "pubkeyB: " (hex-encode (:get-public-point pubkey2)))
    (print "agreekey: " (hex-encode agreekey)))
#+end_src

#+RESULTS:
: prikeyA: 272381629D174EAD2F3939F2FFDCFCFDAFB5885E789EBA30969127F6B6E8F8E2
: pubkeyB: 04EFB6C4A48C69D85C6831922530536FE4500D16F90A454960465CDBF178E4728373D41625F3906A69107463FDD0FA03A1C4E1EB619968DEFEB41D1338B65049D4
: agreekey: 3C027AF77D256133E465CE56ABC1CF31B3D428FD5FE528A4481BCF5D295DAA69

* ECDSA
** Random key - Create signature - TEXT input
#+HEADER: :var TEXT        = "test msg"
#+begin_src janet
  (use botan)
  (let [prikey1 (privkey/new "ECDSA" "secp256r1")
        prikey2 (privkey/new "ECDSA" "secp256r1")

        pubkey1 (:get-pubkey prikey1)
        pubkey2 (:get-pubkey prikey2)

        pk-sig (pk-sign/new prikey1 "EMSA1(SHA-256)")
        pk-veri (pk-verify/new pubkey1 "EMSA1(SHA-256)")

        text TEXT
        signature (:finish (:update pk-sig text))
        sig-verify (:finish (:update pk-veri text) signature)]
    (print "prikeyA:   " (hex-encode (:to-bin (:get-field prikey1 "x"))))
    (print "prikeyB:   " (hex-encode (:to-bin (:get-field prikey2 "x"))))
    (print "pubkeyA:   " (hex-encode (:get-public-point pubkey1)))
    (print "pubkeyB:   " (hex-encode (:get-public-point pubkey2)))
    (print "input:     " text)
    (print "signature: " (hex-encode signature))
    (print "valid?:    " sig-verify))
#+end_src

#+RESULTS:
: prikeyA:   5A6368F2E494684A0584CDAB69BE2A645E5BD4B8970659133542D8DE067C1E7D
: prikeyB:   F5188B139959983096532DBB1476CCAA6E943CA48E36D6CFFD760F877FC17CAE
: pubkeyA:   04801263EF71289EDEFFDD7F877880DAFABB0D09FE1E38332D24C82DF7DD548035087CD15504CA51F4A4C9B988F931CB21BF8EE11103C2A8887C4F0C8D68F450B0
: pubkeyB:   044CB7C7468D2694E674FD9E4CE652EC52036E301A69F6A3CC870DA5FC254CDF53AB3B4B115D7DD5466CF19718E6DC7F3820F4B74B0B882FA88EDF41508546A095
: input:     test msg
: signature: C21446240F1C3D1787DE82EF775BFFCF07787A48CBB1A9A2F9F47794DA401ED7E9D7970D9426D678D3BCD105727CC98E992960F3D757ABEA32EDD59C367EC2B0
: valid?:    true

** Random key - Create signature - HEX input
#+HEADER: :var TEXT        = "010203040506"
#+begin_src janet
  (use botan)
  (let [prikey1 (privkey/new "ECDSA" "secp256r1")
        prikey2 (privkey/new "ECDSA" "secp256r1")

        pubkey1 (:get-pubkey prikey1)
        pubkey2 (:get-pubkey prikey2)

        pk-sig (pk-sign/new prikey1 "EMSA1(SHA-256)")
        pk-veri (pk-verify/new pubkey1 "EMSA1(SHA-256)")

        text (hex-decode TEXT)
        signature (:finish (:update pk-sig text))
        sig-verify (:finish (:update pk-veri text) signature)]
    (print "prikeyA:   " (hex-encode (:to-bin (:get-field prikey1 "x"))))
    (print "prikeyB:   " (hex-encode (:to-bin (:get-field prikey2 "x"))))
    (print "pubkeyA:   " (hex-encode (:get-public-point pubkey1)))
    (print "pubkeyB:   " (hex-encode (:get-public-point pubkey2)))
    (print "input:     " (hex-encode text))
    (print "signature: " (hex-encode signature))
    (print "valid?:    " sig-verify))
#+end_src

#+RESULTS:
: prikeyA:   4D1EC699AC8FBBFBCC66ED605960D2E199790B27A349AEB35A7B12C9E21F876D
: prikeyB:   E0B66F5E8FEC085594141E46A87A2693C7C9598C7CD071FC3FA831008BADECE2
: pubkeyA:   04991927F93160BAF682E32DC872A70E371F48C33E84FB3E79AFE4BBDDCC3F15377B30DB3FFCC6BB2B81A8A3F637B8049DCA401B2464936E72D4CDA2EC7A6AD48E
: pubkeyB:   046CAFA017C5976539DB6F863C57C0A23275F3D0E7D01C25AE5715BBDB7B463D678ECBB7D6A72F9EBD90A725B14468C14AFA1CA2108FB00C712D3A73C869C3EC24
: input:     010203040506
: signature: 85DF4B783B495D2FB30D46FF48B9545908C8DADA0FF0E8758C5018DD2F2794E54A0AFD14C0352F3140D945366D884404165B4939EF86F1DF385926FB73305367
: valid?:    true

** Existing key - Create signature TEXT input
#+HEADER: :var TEXT        = "test msg"
#+HEADER: :var PRIVATE_KEY = "DBC868EF66949314FC040180FC6F1A9867466028364140361FF770733B23EF76"
#+begin_src janet
  (use botan)
  (let [prikey1 (privkey/load-ecdsa "secp256r1" (mpi/from-hex-str PRIVATE_KEY))

        pk-sig (pk-sign/new prikey1 "EMSA1(SHA-256)")

        text TEXT
        signature (:finish (:update pk-sig text))]
    (print "prikey:    " (hex-encode (:to-bin (:get-field prikey1 "x"))))
    (print "input:     " (hex-encode text))
    (print "signature: " (hex-encode signature)))
#+end_src

#+RESULTS:
: prikey:    DBC868EF66949314FC040180FC6F1A9867466028364140361FF770733B23EF76
: input:     74657374206D7367
: signature: BE5F8ACA879F2AA8D2385134AAD44792EAF84CE997A8C4328608BE75447999DB7934DB668DFE49DD4E5CCF7F13CDB304D148B510A4FBA6F3D8B00DAD97FB806E

** Existing key - Create signature HEX input
#+HEADER: :var TEXT        = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var PRIVATE_KEY = "DBC868EF66949314FC040180FC6F1A9867466028364140361FF770733B23EF76"
#+begin_src janet
  (use botan)
  (let [prikey1 (privkey/load-ecdsa "secp256r1" (mpi/from-hex-str PRIVATE_KEY))

        pk-sig (pk-sign/new prikey1 "EMSA1(SHA-256)")

        text (hex-decode TEXT)
        signature (:finish (:update pk-sig text))]
    (print "prikey:    " (hex-encode (:to-bin (:get-field prikey1 "x"))))
    (print "input:     " (hex-encode text))
    (print "signature: " (hex-encode signature)))
#+end_src

#+RESULTS:
: prikey:    DBC868EF66949314FC040180FC6F1A9867466028364140361FF770733B23EF76
: input:     000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F
: signature: 77A75FD1894F4113B5904CE6FBB8819B658856266FFCE3417C799C8E9163D87865CC4D12F3504181C53BAE8C1D497764E47080B73C72764D5F6E717C48E08896

** Existing key - Signature check - TEXT input
#+HEADER: :var TEXT        = "test msg"
#+HEADER: :var PUBLIC_KEY  = "04A9A712C7B56F3C878F230C6F6F31564D11D29F9E30A146E7F99904F6FD743708662C3B989201E6437F9DC261AF500F68C93EF2382F93F9B842E679F5297C1907"
#+HEADER: :var SIGNATURE   = "AC2527E96694CC18BD9A89D1F101CEC292887BC79EE1BD5D9E20CC0E67DFB26C5E486FE5535811368C7D88490399C91D478321A04F05E9C9E265EC1416A41185"
#+begin_src janet
  (use botan)
  (let [pubkey1-mpi-x (mpi/from-hex-str (string/slice PUBLIC_KEY 2 (+ 2 (/ (- (length PUBLIC_KEY) 2) 2))))
        pubkey1-mpi-y (mpi/from-hex-str (string/slice PUBLIC_KEY (+ 2 (/ (- (length PUBLIC_KEY) 2) 2))))

        pubkey1 (pubkey/load-ecdsa "secp256r1" pubkey1-mpi-x pubkey1-mpi-y)

        pk-veri (pk-verify/new pubkey1 "EMSA1(SHA-256)")

        text TEXT
        sig-verify (:finish (:update pk-veri text) (hex-decode SIGNATURE))]
    (print "valid?: " sig-verify))
#+end_src

#+RESULTS:
: valid?: true
** Existing key - Signature check - HEX input
#+HEADER: :var TEXT        = "000102030405060708090A0B0C0D0E0F000102030405060708090A0B0C0D0E0F"
#+HEADER: :var PUBLIC_KEY  = "04A9A712C7B56F3C878F230C6F6F31564D11D29F9E30A146E7F99904F6FD743708662C3B989201E6437F9DC261AF500F68C93EF2382F93F9B842E679F5297C1907"
#+HEADER: :var SIGNATURE   = "999ED1ADF893B7E4812D43AF1205FCAC40B55FAEA44EEAF0B040F4596D7DA0AD3767A2381D288EFB5F2B7684F9A385710653B2C1E094B9C9DEF8A3898F734C78"
#+begin_src janet
  (use botan)
  (let [pubkey1-mpi-x (mpi/from-hex-str (string/slice PUBLIC_KEY 2 (+ 2 (/ (- (length PUBLIC_KEY) 2) 2))))
        pubkey1-mpi-y (mpi/from-hex-str (string/slice PUBLIC_KEY (+ 2 (/ (- (length PUBLIC_KEY) 2) 2))))

        pubkey1 (pubkey/load-ecdsa "secp256r1" pubkey1-mpi-x pubkey1-mpi-y)

        pk-veri (pk-verify/new pubkey1 "EMSA1(SHA-256)")

        text (hex-decode TEXT)
        sig-verify (:finish (:update pk-veri text) (hex-decode SIGNATURE))]
    (print "valid?: " sig-verify))
#+end_src

#+RESULTS:
: valid?: true

* KDF
** SP-800-108 KDF
*** SP-800-108-Counter
#+HEADER: :var KI      = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var SALT    = "02"
#+HEADER: :var LABEL   = "03"
#+HEADER: :var KEY_LEN = 16
#+begin_src janet
  (use botan)
  (print
   (hex-encode
    (kdf "SP800-108-Counter(CMAC(AES-128))"
         KEY_LEN (hex-decode KI) (hex-decode SALT) (hex-decode LABEL))))
#+end_src

#+RESULTS:
: 1B258D35FCA9D012E7D3B7A506FBA3A4
** HKDF
*** HKDF - Text passphrase
#+HEADER: :var PASSPHRASE = "abcd"
#+HEADER: :var SALT       = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var INFO       = ""
#+HEADER: :var KEY_LEN    = 32
#+begin_src janet
  (use botan)
  (print
   (hex-encode
    (kdf "HKDF(HMAC(SHA-256))"
         KEY_LEN PASSPHRASE (hex-decode SALT) (hex-decode INFO))))
#+end_src

#+RESULTS:
: 7B07FAB24B269299C42E6E8ED99760324CD302BC5D0BD6CCE45896C7E1BAD533

*** HKDF - HEX passphrase
#+HEADER: :var PASSPHRASE = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var SALT       = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var INFO       = ""
#+HEADER: :var KEY_LEN    = 32
#+begin_src janet
  (use botan)
  (print
   (hex-encode
    (kdf "HKDF(HMAC(SHA-256))"
     KEY_LEN (hex-decode PASSPHRASE) (hex-decode SALT) (hex-decode INFO))))
#+end_src

#+RESULTS:
: 11E806DCCE73A454CB16AF7EE68F567C5DCD568F305459503A59D0BA17EF970A

** PBKDF2
*** PBKDF2 - Text passphrase
#+HEADER: :var PASSPHRASE = "abcd"
#+HEADER: :var SALT       = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var ITERATION  = 1001
#+HEADER: :var KEY_LEN    = 32
#+begin_src janet
  (use botan)
  (let [[salt iter psk]
        (pbkdf "PBKDF2(SHA-256)"
               PASSPHRASE KEY_LEN ITERATION (hex-decode SALT))]
    (print (hex-encode psk)))
#+end_src

#+RESULTS:
: DECF9EF197B87ABBDB6CBA9E81A7BCB8AC36BB2BFA3B93746C8042227A27CFEA

*** PBKDF2 - HEX passphrase
#+HEADER: :var PASSPHRASE = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var SALT       = "102030405060708090A0B0C0D0E0F000"
#+HEADER: :var ITERATION  = 1001
#+HEADER: :var KEY_LEN    = 32
#+begin_src janet
  (use botan)
  (let [[salt iter psk]
        (pbkdf "PBKDF2(SHA-256)"
               (hex-decode PASSPHRASE) KEY_LEN ITERATION (hex-decode SALT))]
    (print (hex-encode psk)))
#+end_src

#+RESULTS:
: 9CA9E2C9F93EA70B744F9F751637B6C4EA7841F27BFF884902BF5CB48690F229

* RSA
** Demo
#+begin_src janet
  (use botan)
  (let [prikey (privkey/new "RSA" "2048")
        pubkey (:get-pubkey prikey)]
    (print "Prikey: " (hex-encode (:to-der prikey)))
    (print "Pubkey: " (hex-encode (:to-der pubkey))))
#+end_src

#+RESULTS:
: Prikey: 308204BD020100300D06092A864886F70D0101010500048204A7308204A30201000282010100A1CAA764992C44FD1ACD8BA934C8907B860393E5E30B99A26C50B3309483A2DF6922D998771B535BD1EC814EFED555763A239B1136446FF4B9E2951B9563FFCD3DCAFD7BDD4F9894BB69561461402C62B1C626CB35D870C739C5163AECC4D4141BF0AB2465F126BA7C468541F16DEE1752959691676103178ADEC37B46D58B717638F287B23FD9F913D2F808364125A7BE966697562851B3DE700B2D2B091F71BF65D30BCB95DE00BADDCE646140F367CAC7B36B44891873EC8478820A4073A52E1C4F014EAC979D3D48A2B10BA6FE49D817FB85E4F3F2EC6965409C70791543F8F0187106BC56ADF7AB0E6B38421905B34FE327C0F366DFE8AB0AC9A95B6B2102030100010282010004197B0F267E70784559645DF306A460F9AEEF863CAFF128D76EF80B627B2F67EC98AA10D12231EB877D967399C5081122A398B9AE52EF9C17427E512068EDA82F7C72A76E3859E5994949667CCC59AD2A86CDD3A3F10A3F5212D0F92F4177EA39BA36D2564888327D14D9F7273054E57F9733F216D919D78E4574BBC720B41395CCE1E79A5B8685FF694F13B481BD35473AA1EB7DAB7330082882790F2D134426D2BF5ACAB953B21882283E63DF0D543DA19AF63D2CD67E66E7A3CD5B2F62CABD01CC20B4ACDAE74A31A0D2868C70795971F7E69827E55330910AC837438B58E3E48110FAD8B5A6402F32672E2F10A066CE66A67934C4E7BB575C643402BCBD02818100C5B3580CF5775803D978A49DCB139DAAE2387C33A9F3AFB8A6508D36C8046A810E60011EE20235A2DCCF7566AA1C2256516A9FBD17187242D26697FCBB10BD5E23D67D667DDD8D6D50DF88650670CA5A762FDBFF67DEBE5346F5778AE96E1187AEEE57BB067EA5F7A733C1FE730CE019D284A3BF180CB2AC12B0C06866BE712302818100D1807FFB3C9022443AEC1645F256EBD1DFFCECDE23D01C5F66C7FC418C57FA66AC329781F9601A695E006B389654F21B2958CAD126A52556788CA4074CCA56D5256259402B1F54883E28D0A558869C1E71E3F818BF7B474CD76ABCA256E3A3DF6E8358D2FF25E76242AD39DE0CCB18A13A6C3EB02E8D6588ADD1E13F601130EB02818033BAA5835E8707A49A3692FC26B2CF427346CC58C85356DB3DC93DE9E3942439F884EE462264E99BDFA2F8D91011A47A697B38A8C56E44176FEE203EA4C3D088DD5FB618273EDD4E8926B40D9B0DD024B35FFA746DBD3E9793AD8EC5EE263AB801F1A34AF07C1AF91DEAD10BBF16D35C6E54FE7375DB7CB4C17F36191B29217902818100B87A6BB7E27B9500F9D59C4359833AC2A377076910A617E5D60EB1CD5274C21518FAAFB90ECB96564425204542F368018CE6182A15DA8447617D8E8EB30AD56D792EE2228416618C5B17FBAA2D8AD2FC6813730AEFC9F15DF3AE948E6AEEA7057F3DFFC04456AF2A324671575B7297AC995269DD2010F860639715BE85AC7DA3028180104CDC7F194438ABC995A0EA01D5A060838724C8DE1D6722B24CBD6B1D944451004EB5AD5872842683A72C88D36742F0F2C66D7C885F2C0A98715354BCA999AE779C43E2BFCA20AB356393E0E1AAD47C44618268233966179579636D19577C63CD113FFC295A504830E4704451E85498EFB15036D9ED96C4C560833DB06E9988
: Pubkey: 30820122300D06092A864886F70D01010105000382010F003082010A0282010100A1CAA764992C44FD1ACD8BA934C8907B860393E5E30B99A26C50B3309483A2DF6922D998771B535BD1EC814EFED555763A239B1136446FF4B9E2951B9563FFCD3DCAFD7BDD4F9894BB69561461402C62B1C626CB35D870C739C5163AECC4D4141BF0AB2465F126BA7C468541F16DEE1752959691676103178ADEC37B46D58B717638F287B23FD9F913D2F808364125A7BE966697562851B3DE700B2D2B091F71BF65D30BCB95DE00BADDCE646140F367CAC7B36B44891873EC8478820A4073A52E1C4F014EAC979D3D48A2B10BA6FE49D817FB85E4F3F2EC6965409C70791543F8F0187106BC56ADF7AB0E6B38421905B34FE327C0F366DFE8AB0AC9A95B6B210203010001

** Encrypt
#+HEADER: :var HEX_M = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var VAL_E = "010001"
#+HEADER: :var VAL_P = "E59E29CDC32B5186392D4A2339FBCBD47049D3A1BA3E2EE35361D8B0AECE2ACB7250F6B9454AF59F4346E669D07CAD1D77E80B2C7767B5324EA1C30390D928745A79AEAE50094CD337A45C68A3FAA46ACEFE842C99B7AD8A81990F6CD5A60D09B81C4BEF45A4A197F557F83C3806CC9B3B38454B6EAA65EEFDA2BF76CE585555"
#+HEADER: :var VAL_Q = "D4B922F0A78FFC21FFD9525481464CE1E498D5A6053A39AD5D91975EC27188A9360BEFFCCF4B4ACFDF052E5AA3D6A87DA16E31C2805EA5CC803191D981092F8D8EC014595971A394998A2B0D4061ED7BE0047B2FD2A24AD8725AD3353D3A49D3F0104160DD5EBA9101F27B6DAD3DF9555A8C424C83DB37EAA7EB31CE5869E739"
#+begin_src janet
  (use botan)
  (let [prikey (privkey/load-rsa (mpi/from-hex-str VAL_P) (mpi/from-hex-str VAL_Q) (mpi/from-hex-str VAL_E))
        pubkey (:get-pubkey prikey)
        pk-enc (pk-encrypt/new pubkey  "OAEP(SHA-256)")
        encrypted (pk-encrypt/encrypt pk-enc (hex-decode HEX_M))]
    (print "Prikey: " (hex-encode (:to-der prikey)))
    (print "Pubkey: " (hex-encode (:to-der pubkey)))
    (print "Enc:    " (hex-encode encrypted)))
#+end_src

#+RESULTS:
: Prikey: 308204BD020100300D06092A864886F70D0101010500048204A7308204A30201000282010100BECD09417771C1688F0FC4211DF3AFF5C615C2FFD47BDC25671D84A0BFC0A4DD151BA8F2D3416E336D3AA32F02952D06F102E04C4246CE76E0CBF9AA5433C82076FD7E900D8BF2F6255FD1539ECD7821DBE4976E91A316B4DC27FFA3F20C3270E6CB82F838404FD86A393A998D44BDDB1A03BB1960649E9E555949E1ADDAB3CC2216356B9DE4225E37F8D1471FD70134352E1509AEB7C4EE3FF9AE747ECB3BD2A5D11AAA67ADBCB4A08E3490F99C98AB06D961FBE219D1DD55B0A8F32A0E510DDCCC648D4F95D3FB6251248FA2D6F89748B4CC1AB06A76781EF03B9AB559FBA3E4B0C5C853FB349D5C7FBA8F54D05CD76D56BB22F4326F316E1AC49BDE87B2ED0203010001028201000A5E376ACA8C10ABB71C6EF6B2BB377C56417FF969693A9F00B1B2AF8E83F021806062A7A151ACA49842A7B3EA02C3B1DD1E60245CB49ECB086FA5173BA09DB71FE829FCB773BBA5E30588293057AF77BD8C782B1EB85B4744305B3CA42E43FE6D18317B7E09069DB6B5F9E876ABFDDA1E59860CFCB733045D146F46976D2B386C374C4AFF1CF0A41C20BABC6B558925AFEEC14206576DD43AADA6EDD454D8F9EC88283B9659501C319E73BE681EC14968096895C154FC405ED93F94BCC704EF4092DEFA957A6013F87EC6452C1BD8213014E090953FC52E2ECA0C26A4A3920FE0A179B5144A1F85C1AB29B9557CA31C53AA02E982938AC3A7A6F963FCB3FAF902818100E59E29CDC32B5186392D4A2339FBCBD47049D3A1BA3E2EE35361D8B0AECE2ACB7250F6B9454AF59F4346E669D07CAD1D77E80B2C7767B5324EA1C30390D928745A79AEAE50094CD337A45C68A3FAA46ACEFE842C99B7AD8A81990F6CD5A60D09B81C4BEF45A4A197F557F83C3806CC9B3B38454B6EAA65EEFDA2BF76CE58555502818100D4B922F0A78FFC21FFD9525481464CE1E498D5A6053A39AD5D91975EC27188A9360BEFFCCF4B4ACFDF052E5AA3D6A87DA16E31C2805EA5CC803191D981092F8D8EC014595971A394998A2B0D4061ED7BE0047B2FD2A24AD8725AD3353D3A49D3F0104160DD5EBA9101F27B6DAD3DF9555A8C424C83DB37EAA7EB31CE5869E7390281800590538AFCD3ABE208B8A4373E4C6F9FF22897CC2F6B1A4FBFD17B22ACD9AA07CBF952412300B1FAEDF265DAE28662DB77F05374FC5FB2F0491F7A4E37D04B3EA682944CFCFB7CB51180160D230C0BB7DAD427F7BCB1CAAEB47D34F67A26CFE21067FF1F091CF81D6A807B2F5A5C2FD1031A55F381F6F7095773FE17AEE04D110281805448F2C625AE50396C754040C964006C74B5F5D92D330FCD5848AA905A3CBFE843C8E112EB53AAD5C848F63FE5B0D4DBCA4DAE1BA1DF5E9433AAF05E1CD975E501CDAB826785364A57B7BE2D26F8662F71E874A2D33388B250451A707ACD10999001F0D59F80BC2D5E77245EA588EBB4DD06BBF2334075DC5D223C7EC4DB594902818100804F41182E6085F28B70228DE9759FC809945412434C1CF4478C0EC5659D7FB590DBCEE64DEA14C8E5F66E6CF2A766AFF92316BEB7629622C1C45B3B4C62AE88EB921905BDFD44077600566F637BA3DD8BBA864338C276ACA80D25FA93FCD376660A2AC99B1C771AF3814D982FFB2A994FB029E19939DE92E141EF877620968C
: Pubkey: 30820122300D06092A864886F70D01010105000382010F003082010A0282010100BECD09417771C1688F0FC4211DF3AFF5C615C2FFD47BDC25671D84A0BFC0A4DD151BA8F2D3416E336D3AA32F02952D06F102E04C4246CE76E0CBF9AA5433C82076FD7E900D8BF2F6255FD1539ECD7821DBE4976E91A316B4DC27FFA3F20C3270E6CB82F838404FD86A393A998D44BDDB1A03BB1960649E9E555949E1ADDAB3CC2216356B9DE4225E37F8D1471FD70134352E1509AEB7C4EE3FF9AE747ECB3BD2A5D11AAA67ADBCB4A08E3490F99C98AB06D961FBE219D1DD55B0A8F32A0E510DDCCC648D4F95D3FB6251248FA2D6F89748B4CC1AB06A76781EF03B9AB559FBA3E4B0C5C853FB349D5C7FBA8F54D05CD76D56BB22F4326F316E1AC49BDE87B2ED0203010001
: Enc:    465302DA20DA49B200E6DBE9F9878723A00B0D5EC0FE5AB4C8EE8E2F605E2C8F1739346DF5EEBC9FE4DB972045F293FFE064B793236CCCD2B2507C7AF3CC29EBA4B0435C336C1F23F59391578253E3EF94E347B80AAE23FC683A5B3A47118A5528D5B69E7D7946994B2357544C0CD70987E22FFC415BB592BFDD0B998B21820E8D35EECEBCF8652004F02548CCCF8ED6720387C4676F5ED874695F0DA20EA0BF7F497C93CCC6B9E1E0BCA04C54365FA9804242783A65B1679A4EA30A8CB74EB353C25FF29B12B0A4065B445392B717F8D6F632AF82B9BED2E4B7269DC1A98E4874205E0745B520A4A2599A8206872F28360782D831C2FCED78B78F249A9B4B01

** Decrypt
#+HEADER: :var ENC_M = "465302DA20DA49B200E6DBE9F9878723A00B0D5EC0FE5AB4C8EE8E2F605E2C8F1739346DF5EEBC9FE4DB972045F293FFE064B793236CCCD2B2507C7AF3CC29EBA4B0435C336C1F23F59391578253E3EF94E347B80AAE23FC683A5B3A47118A5528D5B69E7D7946994B2357544C0CD70987E22FFC415BB592BFDD0B998B21820E8D35EECEBCF8652004F02548CCCF8ED6720387C4676F5ED874695F0DA20EA0BF7F497C93CCC6B9E1E0BCA04C54365FA9804242783A65B1679A4EA30A8CB74EB353C25FF29B12B0A4065B445392B717F8D6F632AF82B9BED2E4B7269DC1A98E4874205E0745B520A4A2599A8206872F28360782D831C2FCED78B78F249A9B4B01"
#+HEADER: :var VAL_E = "010001"
#+HEADER: :var VAL_P = "E59E29CDC32B5186392D4A2339FBCBD47049D3A1BA3E2EE35361D8B0AECE2ACB7250F6B9454AF59F4346E669D07CAD1D77E80B2C7767B5324EA1C30390D928745A79AEAE50094CD337A45C68A3FAA46ACEFE842C99B7AD8A81990F6CD5A60D09B81C4BEF45A4A197F557F83C3806CC9B3B38454B6EAA65EEFDA2BF76CE585555"
#+HEADER: :var VAL_Q = "D4B922F0A78FFC21FFD9525481464CE1E498D5A6053A39AD5D91975EC27188A9360BEFFCCF4B4ACFDF052E5AA3D6A87DA16E31C2805EA5CC803191D981092F8D8EC014595971A394998A2B0D4061ED7BE0047B2FD2A24AD8725AD3353D3A49D3F0104160DD5EBA9101F27B6DAD3DF9555A8C424C83DB37EAA7EB31CE5869E739"
#+begin_src janet
  (use botan)
  (let [prikey (privkey/load-rsa (mpi/from-hex-str VAL_P) (mpi/from-hex-str VAL_Q) (mpi/from-hex-str VAL_E))
        pk-dec (pk-decrypt/new prikey  "OAEP(SHA-256)")
        plain (pk-decrypt/decrypt pk-dec (hex-decode ENC_M))]
    (print "Prikey: " (hex-encode (:to-der prikey)))
    (print "Dec:    " (hex-encode plain)))
#+end_src

#+RESULTS:
: Prikey: 308204BD020100300D06092A864886F70D0101010500048204A7308204A30201000282010100BECD09417771C1688F0FC4211DF3AFF5C615C2FFD47BDC25671D84A0BFC0A4DD151BA8F2D3416E336D3AA32F02952D06F102E04C4246CE76E0CBF9AA5433C82076FD7E900D8BF2F6255FD1539ECD7821DBE4976E91A316B4DC27FFA3F20C3270E6CB82F838404FD86A393A998D44BDDB1A03BB1960649E9E555949E1ADDAB3CC2216356B9DE4225E37F8D1471FD70134352E1509AEB7C4EE3FF9AE747ECB3BD2A5D11AAA67ADBCB4A08E3490F99C98AB06D961FBE219D1DD55B0A8F32A0E510DDCCC648D4F95D3FB6251248FA2D6F89748B4CC1AB06A76781EF03B9AB559FBA3E4B0C5C853FB349D5C7FBA8F54D05CD76D56BB22F4326F316E1AC49BDE87B2ED0203010001028201000A5E376ACA8C10ABB71C6EF6B2BB377C56417FF969693A9F00B1B2AF8E83F021806062A7A151ACA49842A7B3EA02C3B1DD1E60245CB49ECB086FA5173BA09DB71FE829FCB773BBA5E30588293057AF77BD8C782B1EB85B4744305B3CA42E43FE6D18317B7E09069DB6B5F9E876ABFDDA1E59860CFCB733045D146F46976D2B386C374C4AFF1CF0A41C20BABC6B558925AFEEC14206576DD43AADA6EDD454D8F9EC88283B9659501C319E73BE681EC14968096895C154FC405ED93F94BCC704EF4092DEFA957A6013F87EC6452C1BD8213014E090953FC52E2ECA0C26A4A3920FE0A179B5144A1F85C1AB29B9557CA31C53AA02E982938AC3A7A6F963FCB3FAF902818100E59E29CDC32B5186392D4A2339FBCBD47049D3A1BA3E2EE35361D8B0AECE2ACB7250F6B9454AF59F4346E669D07CAD1D77E80B2C7767B5324EA1C30390D928745A79AEAE50094CD337A45C68A3FAA46ACEFE842C99B7AD8A81990F6CD5A60D09B81C4BEF45A4A197F557F83C3806CC9B3B38454B6EAA65EEFDA2BF76CE58555502818100D4B922F0A78FFC21FFD9525481464CE1E498D5A6053A39AD5D91975EC27188A9360BEFFCCF4B4ACFDF052E5AA3D6A87DA16E31C2805EA5CC803191D981092F8D8EC014595971A394998A2B0D4061ED7BE0047B2FD2A24AD8725AD3353D3A49D3F0104160DD5EBA9101F27B6DAD3DF9555A8C424C83DB37EAA7EB31CE5869E7390281800590538AFCD3ABE208B8A4373E4C6F9FF22897CC2F6B1A4FBFD17B22ACD9AA07CBF952412300B1FAEDF265DAE28662DB77F05374FC5FB2F0491F7A4E37D04B3EA682944CFCFB7CB51180160D230C0BB7DAD427F7BCB1CAAEB47D34F67A26CFE21067FF1F091CF81D6A807B2F5A5C2FD1031A55F381F6F7095773FE17AEE04D110281805448F2C625AE50396C754040C964006C74B5F5D92D330FCD5848AA905A3CBFE843C8E112EB53AAD5C848F63FE5B0D4DBCA4DAE1BA1DF5E9433AAF05E1CD975E501CDAB826785364A57B7BE2D26F8662F71E874A2D33388B250451A707ACD10999001F0D59F80BC2D5E77245EA588EBB4DD06BBF2334075DC5D223C7EC4DB594902818100804F41182E6085F28B70228DE9759FC809945412434C1CF4478C0EC5659D7FB590DBCEE64DEA14C8E5F66E6CF2A766AFF92316BEB7629622C1C45B3B4C62AE88EB921905BDFD44077600566F637BA3DD8BBA864338C276ACA80D25FA93FCD376660A2AC99B1C771AF3814D982FFB2A994FB029E19939DE92E141EF877620968C
: Dec:    000102030405060708090A0B0C0D0E0F

** Sign
#+HEADER: :var HEX_M = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var VAL_E = "010001"
#+HEADER: :var VAL_P = "E59E29CDC32B5186392D4A2339FBCBD47049D3A1BA3E2EE35361D8B0AECE2ACB7250F6B9454AF59F4346E669D07CAD1D77E80B2C7767B5324EA1C30390D928745A79AEAE50094CD337A45C68A3FAA46ACEFE842C99B7AD8A81990F6CD5A60D09B81C4BEF45A4A197F557F83C3806CC9B3B38454B6EAA65EEFDA2BF76CE585555"
#+HEADER: :var VAL_Q = "D4B922F0A78FFC21FFD9525481464CE1E498D5A6053A39AD5D91975EC27188A9360BEFFCCF4B4ACFDF052E5AA3D6A87DA16E31C2805EA5CC803191D981092F8D8EC014595971A394998A2B0D4061ED7BE0047B2FD2A24AD8725AD3353D3A49D3F0104160DD5EBA9101F27B6DAD3DF9555A8C424C83DB37EAA7EB31CE5869E739"
#+begin_src janet
  (use botan)
  (let [prikey (privkey/load-rsa (mpi/from-hex-str VAL_P) (mpi/from-hex-str VAL_Q) (mpi/from-hex-str VAL_E))
        pk-sig (pk-sign/new prikey "PSS(SHA-256)")
        signature (:finish (:update pk-sig (hex-decode HEX_M)))]
    (print "Prikey:    " (hex-encode (:to-der prikey)))
    (print "Signature: " (hex-encode signature)))
#+end_src

#+RESULTS:
: Prikey:    308204BD020100300D06092A864886F70D0101010500048204A7308204A30201000282010100BECD09417771C1688F0FC4211DF3AFF5C615C2FFD47BDC25671D84A0BFC0A4DD151BA8F2D3416E336D3AA32F02952D06F102E04C4246CE76E0CBF9AA5433C82076FD7E900D8BF2F6255FD1539ECD7821DBE4976E91A316B4DC27FFA3F20C3270E6CB82F838404FD86A393A998D44BDDB1A03BB1960649E9E555949E1ADDAB3CC2216356B9DE4225E37F8D1471FD70134352E1509AEB7C4EE3FF9AE747ECB3BD2A5D11AAA67ADBCB4A08E3490F99C98AB06D961FBE219D1DD55B0A8F32A0E510DDCCC648D4F95D3FB6251248FA2D6F89748B4CC1AB06A76781EF03B9AB559FBA3E4B0C5C853FB349D5C7FBA8F54D05CD76D56BB22F4326F316E1AC49BDE87B2ED0203010001028201000A5E376ACA8C10ABB71C6EF6B2BB377C56417FF969693A9F00B1B2AF8E83F021806062A7A151ACA49842A7B3EA02C3B1DD1E60245CB49ECB086FA5173BA09DB71FE829FCB773BBA5E30588293057AF77BD8C782B1EB85B4744305B3CA42E43FE6D18317B7E09069DB6B5F9E876ABFDDA1E59860CFCB733045D146F46976D2B386C374C4AFF1CF0A41C20BABC6B558925AFEEC14206576DD43AADA6EDD454D8F9EC88283B9659501C319E73BE681EC14968096895C154FC405ED93F94BCC704EF4092DEFA957A6013F87EC6452C1BD8213014E090953FC52E2ECA0C26A4A3920FE0A179B5144A1F85C1AB29B9557CA31C53AA02E982938AC3A7A6F963FCB3FAF902818100E59E29CDC32B5186392D4A2339FBCBD47049D3A1BA3E2EE35361D8B0AECE2ACB7250F6B9454AF59F4346E669D07CAD1D77E80B2C7767B5324EA1C30390D928745A79AEAE50094CD337A45C68A3FAA46ACEFE842C99B7AD8A81990F6CD5A60D09B81C4BEF45A4A197F557F83C3806CC9B3B38454B6EAA65EEFDA2BF76CE58555502818100D4B922F0A78FFC21FFD9525481464CE1E498D5A6053A39AD5D91975EC27188A9360BEFFCCF4B4ACFDF052E5AA3D6A87DA16E31C2805EA5CC803191D981092F8D8EC014595971A394998A2B0D4061ED7BE0047B2FD2A24AD8725AD3353D3A49D3F0104160DD5EBA9101F27B6DAD3DF9555A8C424C83DB37EAA7EB31CE5869E7390281800590538AFCD3ABE208B8A4373E4C6F9FF22897CC2F6B1A4FBFD17B22ACD9AA07CBF952412300B1FAEDF265DAE28662DB77F05374FC5FB2F0491F7A4E37D04B3EA682944CFCFB7CB51180160D230C0BB7DAD427F7BCB1CAAEB47D34F67A26CFE21067FF1F091CF81D6A807B2F5A5C2FD1031A55F381F6F7095773FE17AEE04D110281805448F2C625AE50396C754040C964006C74B5F5D92D330FCD5848AA905A3CBFE843C8E112EB53AAD5C848F63FE5B0D4DBCA4DAE1BA1DF5E9433AAF05E1CD975E501CDAB826785364A57B7BE2D26F8662F71E874A2D33388B250451A707ACD10999001F0D59F80BC2D5E77245EA588EBB4DD06BBF2334075DC5D223C7EC4DB594902818100804F41182E6085F28B70228DE9759FC809945412434C1CF4478C0EC5659D7FB590DBCEE64DEA14C8E5F66E6CF2A766AFF92316BEB7629622C1C45B3B4C62AE88EB921905BDFD44077600566F637BA3DD8BBA864338C276ACA80D25FA93FCD376660A2AC99B1C771AF3814D982FFB2A994FB029E19939DE92E141EF877620968C
: Signature: 9535706AAC74A7DDB6E36953037000B2A627F8E4E37F287B589F8F366534D934EEFEE7136097C7E712E2BD66245C3DF2FCD671E706B61366F8B59AEF8412F46662FF00D92772A53F400BE66C553B591009EECE743E9B1FD61237B9B6B8197473EF581A5317455890312AC16073246DF42BBDEB02C29D9DEBD0E276E84CAD2AA131EA00AD739734073DD8C9DE957D7138337A7218A5226B3E35853952961B5EEA362D95A4927674A81478DA5D4D50E3613467554EABB14217B3878826D1313AEBF19441DFD40F2FAD830A56C26799253FD8C27898F6F896DD463CA14B694217C36DA428AA1DE292807385406493DDB97FA2926C54B55CBF0FBC251F6CBBF59F97

** Verify
#+HEADER: :var SIGN  = "9535706AAC74A7DDB6E36953037000B2A627F8E4E37F287B589F8F366534D934EEFEE7136097C7E712E2BD66245C3DF2FCD671E706B61366F8B59AEF8412F46662FF00D92772A53F400BE66C553B591009EECE743E9B1FD61237B9B6B8197473EF581A5317455890312AC16073246DF42BBDEB02C29D9DEBD0E276E84CAD2AA131EA00AD739734073DD8C9DE957D7138337A7218A5226B3E35853952961B5EEA362D95A4927674A81478DA5D4D50E3613467554EABB14217B3878826D1313AEBF19441DFD40F2FAD830A56C26799253FD8C27898F6F896DD463CA14B694217C36DA428AA1DE292807385406493DDB97FA2926C54B55CBF0FBC251F6CBBF59F97"
#+HEADER: :var HEX_M = "000102030405060708090A0B0C0D0E0F"
#+HEADER: :var VAL_E = "010001"
#+HEADER: :var VAL_P = "E59E29CDC32B5186392D4A2339FBCBD47049D3A1BA3E2EE35361D8B0AECE2ACB7250F6B9454AF59F4346E669D07CAD1D77E80B2C7767B5324EA1C30390D928745A79AEAE50094CD337A45C68A3FAA46ACEFE842C99B7AD8A81990F6CD5A60D09B81C4BEF45A4A197F557F83C3806CC9B3B38454B6EAA65EEFDA2BF76CE585555"
#+HEADER: :var VAL_Q = "D4B922F0A78FFC21FFD9525481464CE1E498D5A6053A39AD5D91975EC27188A9360BEFFCCF4B4ACFDF052E5AA3D6A87DA16E31C2805EA5CC803191D981092F8D8EC014595971A394998A2B0D4061ED7BE0047B2FD2A24AD8725AD3353D3A49D3F0104160DD5EBA9101F27B6DAD3DF9555A8C424C83DB37EAA7EB31CE5869E739"
#+begin_src janet
  (use botan)
  (let [prikey (privkey/load-rsa (mpi/from-hex-str VAL_P) (mpi/from-hex-str VAL_Q) (mpi/from-hex-str VAL_E))
        pubkey (:get-pubkey prikey)
        pk-veri (pk-verify/new pubkey "PSS(SHA-256)")
        valid (:finish (:update pk-veri (hex-decode HEX_M)) (hex-decode SIGN))]
    (print "Prikey: " (hex-encode (:to-der prikey)))
    (print "Pubkey: " (hex-encode (:to-der pubkey)))
    (print "Valid?: " valid))
#+end_src

#+RESULTS:
: Prikey: 308204BD020100300D06092A864886F70D0101010500048204A7308204A30201000282010100BECD09417771C1688F0FC4211DF3AFF5C615C2FFD47BDC25671D84A0BFC0A4DD151BA8F2D3416E336D3AA32F02952D06F102E04C4246CE76E0CBF9AA5433C82076FD7E900D8BF2F6255FD1539ECD7821DBE4976E91A316B4DC27FFA3F20C3270E6CB82F838404FD86A393A998D44BDDB1A03BB1960649E9E555949E1ADDAB3CC2216356B9DE4225E37F8D1471FD70134352E1509AEB7C4EE3FF9AE747ECB3BD2A5D11AAA67ADBCB4A08E3490F99C98AB06D961FBE219D1DD55B0A8F32A0E510DDCCC648D4F95D3FB6251248FA2D6F89748B4CC1AB06A76781EF03B9AB559FBA3E4B0C5C853FB349D5C7FBA8F54D05CD76D56BB22F4326F316E1AC49BDE87B2ED0203010001028201000A5E376ACA8C10ABB71C6EF6B2BB377C56417FF969693A9F00B1B2AF8E83F021806062A7A151ACA49842A7B3EA02C3B1DD1E60245CB49ECB086FA5173BA09DB71FE829FCB773BBA5E30588293057AF77BD8C782B1EB85B4744305B3CA42E43FE6D18317B7E09069DB6B5F9E876ABFDDA1E59860CFCB733045D146F46976D2B386C374C4AFF1CF0A41C20BABC6B558925AFEEC14206576DD43AADA6EDD454D8F9EC88283B9659501C319E73BE681EC14968096895C154FC405ED93F94BCC704EF4092DEFA957A6013F87EC6452C1BD8213014E090953FC52E2ECA0C26A4A3920FE0A179B5144A1F85C1AB29B9557CA31C53AA02E982938AC3A7A6F963FCB3FAF902818100E59E29CDC32B5186392D4A2339FBCBD47049D3A1BA3E2EE35361D8B0AECE2ACB7250F6B9454AF59F4346E669D07CAD1D77E80B2C7767B5324EA1C30390D928745A79AEAE50094CD337A45C68A3FAA46ACEFE842C99B7AD8A81990F6CD5A60D09B81C4BEF45A4A197F557F83C3806CC9B3B38454B6EAA65EEFDA2BF76CE58555502818100D4B922F0A78FFC21FFD9525481464CE1E498D5A6053A39AD5D91975EC27188A9360BEFFCCF4B4ACFDF052E5AA3D6A87DA16E31C2805EA5CC803191D981092F8D8EC014595971A394998A2B0D4061ED7BE0047B2FD2A24AD8725AD3353D3A49D3F0104160DD5EBA9101F27B6DAD3DF9555A8C424C83DB37EAA7EB31CE5869E7390281800590538AFCD3ABE208B8A4373E4C6F9FF22897CC2F6B1A4FBFD17B22ACD9AA07CBF952412300B1FAEDF265DAE28662DB77F05374FC5FB2F0491F7A4E37D04B3EA682944CFCFB7CB51180160D230C0BB7DAD427F7BCB1CAAEB47D34F67A26CFE21067FF1F091CF81D6A807B2F5A5C2FD1031A55F381F6F7095773FE17AEE04D110281805448F2C625AE50396C754040C964006C74B5F5D92D330FCD5848AA905A3CBFE843C8E112EB53AAD5C848F63FE5B0D4DBCA4DAE1BA1DF5E9433AAF05E1CD975E501CDAB826785364A57B7BE2D26F8662F71E874A2D33388B250451A707ACD10999001F0D59F80BC2D5E77245EA588EBB4DD06BBF2334075DC5D223C7EC4DB594902818100804F41182E6085F28B70228DE9759FC809945412434C1CF4478C0EC5659D7FB590DBCEE64DEA14C8E5F66E6CF2A766AFF92316BEB7629622C1C45B3B4C62AE88EB921905BDFD44077600566F637BA3DD8BBA864338C276ACA80D25FA93FCD376660A2AC99B1C771AF3814D982FFB2A994FB029E19939DE92E141EF877620968C
: Pubkey: 30820122300D06092A864886F70D01010105000382010F003082010A0282010100BECD09417771C1688F0FC4211DF3AFF5C615C2FFD47BDC25671D84A0BFC0A4DD151BA8F2D3416E336D3AA32F02952D06F102E04C4246CE76E0CBF9AA5433C82076FD7E900D8BF2F6255FD1539ECD7821DBE4976E91A316B4DC27FFA3F20C3270E6CB82F838404FD86A393A998D44BDDB1A03BB1960649E9E555949E1ADDAB3CC2216356B9DE4225E37F8D1471FD70134352E1509AEB7C4EE3FF9AE747ECB3BD2A5D11AAA67ADBCB4A08E3490F99C98AB06D961FBE219D1DD55B0A8F32A0E510DDCCC648D4F95D3FB6251248FA2D6F89748B4CC1AB06A76781EF03B9AB559FBA3E4B0C5C853FB349D5C7FBA8F54D05CD76D56BB22F4326F316E1AC49BDE87B2ED0203010001
: Valid?: true
